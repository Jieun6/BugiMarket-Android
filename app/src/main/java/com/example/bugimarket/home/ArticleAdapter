package com.example.myfirebase.home

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView
import com.bumptech.glide.Glide
import com.example.myfirebase.databinding.ItemArticleBinding
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.storage.FirebaseStorage
import java.text.SimpleDateFormat
import java.util.*

//ArticleAdapter 클래스 정의, ListAdapter를 상속받음
class ArticleAdapter(val onItemClicked: (ArticleModel) -> Unit) : ListAdapter<ArticleModel, ArticleAdapter.ViewHolder>(diffUtil) {

    //FirebaseAuth 인스턴스를 저장하는 프로퍼티
    private val auth: FirebaseAuth by lazy {
        FirebaseAuth.getInstance()
    }

    //ViewHolder 내부 클래스 정의
    inner class ViewHolder(private val binding: ItemArticleBinding) : RecyclerView.ViewHolder(binding.root) {

        //ArticleModel를 ViewHolder에 바인딩하는 메서드
        fun bind(articleModel: ArticleModel) {
            //날짜 형식 지정을 위한 SimpleDataFormat 인스턴스 생성
            val format = SimpleDateFormat("MM월 dd일")
            val date = Date(articleModel.createdAt)

            //UI 요소에 데이터 설정
            binding.titleTextView.text = articleModel.title
            binding.dateTextView.text = format.format(date).toString()
            binding.priceTextView.text = "${articleModel.price}원"
            binding.statusTextView.text = if (articleModel.status == Status.ONSALE.name) "판매중" else "판매완료"


            //이미지 URL이 "gs://"로 시작하는 경우 Firebase Storage에서 이미지 다운로드
            if (articleModel.imageUrl.startsWith("gs://")) {
                val storageRef = FirebaseStorage.getInstance().getReferenceFromUrl(articleModel.imageUrl)

                storageRef.downloadUrl.addOnSuccessListener { uri ->
                    val imageUrl = uri.toString()
                    Glide.with(binding.thumbnailImageView)
                        .load(imageUrl)
                        .into(binding.thumbnailImageView)
                }.addOnFailureListener {

                }
            } else {
                //그렇지 않은 경우 Glide를 사용하여 이미지 로드
                Glide.with(binding.thumbnailImageView)
                    .load(articleModel.imageUrl)
                    .into(binding.thumbnailImageView)
            }
            //아이템 클릭 이벤트 설정
            binding.root.setOnClickListener {
                onItemClicked(articleModel)
            }


        }
    }

    //ViewHolder를 생성하는 메서드
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
        return ViewHolder(
            ItemArticleBinding.inflate(
                LayoutInflater.from(parent.context),
                parent,
                false
            )
        )
    }

    //ViewHolder에 데이터를 바인딩하는 메서드
    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        val articleModel = currentList[position]
        holder.bind(articleModel)

        /* holder.itemView.setOnClickListener {
            val intent = Intent(holder.itemView.context, 상세보기Activity::class.java).apply {
                putExtra("chatKey", articleModel.chatKey)
                putExtra("title", articleModel.title)
                putExtra("price", articleModel.price)
                putExtra("description", articleModel.description)
                putExtra("imageUrl", articleModel.imageUrl)
                putExtra("status", articleModel.status)  // 'status' 정보 추가
                putExtra("isSeller", articleModel.sellerId == auth.currentUser?.uid)

            }
            holder.itemView.context.startActivity(intent)
        } */
    }

    //ArticleModel 간의 차이를 계산하는 유틸리티 객체
    companion object {
        val diffUtil = object : DiffUtil.ItemCallback<ArticleModel>() {

            //두 아이템이 동일한지 확인
            override fun areItemsTheSame(oldItem: ArticleModel, newItem: ArticleModel): Boolean {
                return oldItem.createdAt == newItem.createdAt
            }

            //두 아이템의 내용이 동일한지 확인
            override fun areContentsTheSame(oldItem: ArticleModel, newItem: ArticleModel): Boolean {
                return oldItem == newItem
            }
        }
    }

}
